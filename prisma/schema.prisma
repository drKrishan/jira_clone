// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Project {
    id              String    @id @default(uuid())
    key             String    @unique
    name            String
    defaultAssignee String?
    imageUrl        String?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime? @updatedAt
    deletedAt       DateTime?
    members         Member[]
}

model Member {
    id        String  @id
    projectId String
    project   Project @relation(fields: [projectId], references: [id])

    @@index([projectId])
}

enum IssueType {
    BUG
    TASK
    SUBTASK
    STORY
    EPIC
}

enum IssueStatus {
    TODO
    IN_PROGRESS
    DONE
}

model Issue {
    id                  String      @id @default(uuid())
    key                 String
    name                String
    description         String?     @db.Text()
    acceptanceCriteria  String?     @db.Text()
    status              IssueStatus @default(TODO)
    type                IssueType   @default(TASK)
    sprintPosition      Float
    boardPosition       Float       @default(-1)
    reporterId          String      @default("1")
    assigneeId          String?
    parentId            String?
    sprintId            String?
    isDeleted           Boolean     @default(false)
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    deletedAt           DateTime?
    sprintColor         String?
    creatorId           String
    comments            Comment[]
    Sprint              Sprint?     @relation(fields: [sprintId], references: [id])

    @@unique([key, creatorId])
    @@index([sprintId])
}

enum SprintStatus {
    ACTIVE
    PENDING
    CLOSED
}

enum Duration {
    ONE_WEEK
    TWO_WEEKS
    THREE_WEEKS
    FOUR_WEEKS
    CUSTOM
}

model Sprint {
    id          String       @id @default(uuid())
    name        String
    description String       @db.Text()
    duration    String?
    startDate   DateTime?
    endDate     DateTime?
    creatorId   String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime?    @updatedAt
    deletedAt   DateTime?
    status      SprintStatus @default(PENDING)
    issues      Issue[]
}

model Comment {
    id        String    @id @default(uuid())
    content   String    @db.Text()
    authorId  String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    isEdited  Boolean   @default(false)
    issueId   String
    logId     String?
    Issue     Issue?    @relation(fields: [issueId], references: [id])

    @@index([issueId])
}

model DefaultUser {
    id     String  @id
    name   String
    email  String
    avatar String?
}

enum TestCasePriority {
    CRITICAL
    HIGH
    MEDIUM
    NORMAL
    LOW
}

enum TestCaseType {
    FUNCTIONAL
    NON_FUNCTIONAL
    PERFORMANCE
}

enum TestCaseReviewStatus {
    NEW
    APPROVED
    REJECTED
}

enum TestCaseProgress {
    TODO
    IN_PROGRESS
    DONE
    CANCELLED
}

model TestFolder {
    id          String     @id @default(uuid())
    name        String
    count       Int        @default(0)
    projectId   String
    parentId    String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    creatorId   String
    testCases   TestCase[]
}

model TestCase {
    id           String                @id @default(uuid())
    key          String                @unique
    summary      String
    version      Int                   @default(1)
    priority     TestCasePriority      @default(MEDIUM)
    type         TestCaseType          @default(FUNCTIONAL)
    reviewStatus TestCaseReviewStatus  @default(NEW)
    progress     TestCaseProgress      @default(TODO)
    labels       String[]
    folderId     String
    folder       TestFolder            @relation(fields: [folderId], references: [id])
    createdAt    DateTime              @default(now())
    updatedAt    DateTime              @updatedAt
    creatorId    String
    steps        TestStep[]

    @@index([folderId])
}

model TestStep {
    id             String    @id @default(uuid())
    stepNumber     Int
    summary        String    @db.Text()
    preCondition   String?   @db.Text()
    testData       String?   @db.Text()
    expectedResult String    @db.Text()
    testCaseId     String
    testCase       TestCase  @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    @@index([testCaseId])
}
